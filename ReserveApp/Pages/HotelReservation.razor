@using ReserveApp.Data
@using ReserveApp.Services
@inject IReservationService reservationService

<div class="modal" style="display: @(showModal ? "block" : "none")">
    <div class="modal-dialog" role="document">

        <div class="modal-content">
            <div class="modal-header">
                <h3>Make Reservation</h3>
            </div>
            <div class="modal-body">
                <!-- Include form fields for reservation details -->
                <div>
                    @if (selectedHotel != null)
                    {
                        <h6>@selectedHotel.Name</h6>
                        <p>
                            Single: $@selectedHotel.SingleBedPrice
                            Double: $@selectedHotel.DoubleBedPrice
                            Suite: $@selectedHotel.FamilySuitePrice
                        </p>
                    }

                </div>
                <div class="input-group  mb-3">
                    <div class="input-group-prepend form-floating">
                        <input type="date" id="startDate" class="form-control" @bind="startDate" aria-required="true" />
                        <label asp-for="startDate" class="form-label">Start Date</label>
                        <span asp-validation-for="startDate" class="text-danger"></span>
                    </div>
                    <div class="form-floating">
                        <input type="date" id="endDate" class="form-control" @bind="endDate" aria-required="true" />
                        <label asp-for="endDate" class="form-label">End Date</label>
                        <span asp-validation-for="endDate" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-6" for="roomType">Room Type:</label>
                    <div class="col-6">
                        <select class="form-control-sm" id="roomType" @bind="selectedRoomType">
                            <option value="Single">Single</option>
                            <option value="Double">Double</option>
                            <option value="FamilySuite">Family Suite</option>
                        </select>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-6" for="numberOfAdults">Number of Adults:</label>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" id="numberOfAdults" @bind="numberOfAdults" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-6" for="numberOfChildren">Number of Children:</label>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" id="numberOfChildren" @bind="numberOfChildren" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-6">
                        <label for="numberOfChildren">Total Amount:</label>
                        <button class="btn btn-sm btn-outline-secondary" type="button" @onclick="CalculateTotalAmount">Calculate</button>
                    </div>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" readonly="readonly" id="totalAmount" value="@totalAmount" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-6" for="numberOfChildren">Deposit Amount:</label>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" id="depositAmount" @bind="depositAmount" />
                    </div>
                </div>
                <!-- Include other form fields as needed -->
            </div>
            <div class="modal-footer">
                <button @onclick="Reserve">Reserve</button>
                <button @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private RoomType selectedRoomType = RoomType.Single;
    private int numberOfAdults = 1;
    private int numberOfChildren = 0;
    private bool showModal = false; // Add this state variable
    private Hotel selectedHotel = new();
    private DateTime startDate { get; set; } = DateTime.Now;
    private DateTime endDate { get; set; } = DateTime.Now;
    private decimal totalAmount { get; set; }
    private decimal depositAmount { get; set; }
    private string _userId = "";

    [Parameter]
    public EventCallback OnReservationComplete { get; set; }


    public void Show(Hotel hotel, DateTime date1, DateTime date2, string userId)
    {
        selectedHotel = hotel;
        startDate = date1;
        endDate = date2;
        _userId = userId;
        showModal = true;
    }

    private async Task CalculateTotalAmount()
    {
        await InvokeAsync(() =>
        {
            // Calculate total amount when either date range or room type changes
            if (selectedRoomType != null)
            {
                // Calculate the number of days for the reservation
              
                int numberOfDays = (int)(endDate.Date - startDate.Date).TotalDays + 1;

                // Calculate the total amount based on the selected room type and number of days
                decimal roomTypePrice = GetRoomTypePrice(selectedRoomType);
                totalAmount = roomTypePrice * numberOfDays;
            }
            else
            {
                // Set total amount to 0 or handle accordingly based on your requirements
                totalAmount = 0;
            }
            StateHasChanged();
        });
    }
    private decimal GetRoomTypePrice(RoomType roomType)
    {
        return roomType == RoomType.Single ? selectedHotel.SingleBedPrice : roomType == RoomType.Double ? selectedHotel.DoubleBedPrice : selectedHotel.FamilySuitePrice;
    }
    private async void Reserve()
    {
        // Check if start date is before or equal to end date
        if (startDate <= endDate)
        {
            // Check if the selected room type is Single and the number of adults is more than 1
            if (selectedRoomType == RoomType.Single && numberOfAdults > 1)
            {
                // reset numberOfAdults to 1
                numberOfAdults = 1;

                // You can also return or throw an exception, depending on your error handling strategy
                return;
            }
            // Calculate the number of days for the reservation
            //int numberOfDays = (int)(endDate - startDate).TotalDays + 1;

            // Implement the logic to create and save the reservation for each day in the range

            // Create and save the reservation for each day
            Reservation reservation = new Reservation
                {
                    HotelId = selectedHotel.HotelId,
                    CustomerId = _userId,
                    ReservationStartDate = startDate,
                    ReservationEndDate = endDate, // Assuming the reservation is for a single day
                    RoomType = selectedRoomType,
                    NumberOfAdults = numberOfAdults,
                    NumberOfChildren = numberOfChildren,
                    // Other reservation details

                    // Calculate and set deposit and total amount based on your logic
                    DepositAmount = depositAmount,
                    TotalAmount = totalAmount,

                    IsConfirmed = depositAmount >= totalAmount // The reservation is not confirmed until the deposit is made
                };

            // Save the reservation to the database
            bool success = await reservationService.CreateReservation(reservation);
            if (success)
            {
                // Notify the parent component about the reservation completion
                await OnReservationComplete.InvokeAsync();

                // Close the modal
                CloseModal();
            }
            else
            {
                Console.WriteLine("Reservation Creation failed");
            }

        }
        else
        {
            // Handle the case where the start date is after the end date (invalid range)
            // You can show an error message or take other appropriate action
        }
        StateHasChanged();
    }

    private void CloseModal()
    {
        // Implement the logic to close the modal
        // You can use JavaScript interop or a state variable to control the modal visibility
        showModal = false;

    }
}


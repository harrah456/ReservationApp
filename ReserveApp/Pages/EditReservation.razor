@using ReserveApp.Data
@using ReserveApp.Services
@inject IReservatonService reservationService
@inject IHotelService hotelService
@inject ITourService tourService

<div class="modal" style="display: @(showModal ? "block" : "none")">
    <div class="modal-dialog" role="document">

        <div class="modal-content">
            <div class="modal-header">
                <h3>Edit Reservation</h3>
            </div>
            <div class="modal-body">
                <!-- Include form fields for reservation details -->
                @if (reservation != null)
                {
                    <div>
                        @if (reservation.Tour != null)
                        {
                            <h6>@reservation.Tour.Name</h6>
                            <p>
                                Cost: $@reservation.Tour.Cost
                                Available Spaces: $@reservation.Tour.AvailableSpaces
                            </p>
                        }

                    </div>
                    <hr />
                    <div>
                        @if (reservation.Hotel != null)
                        {
                            <h6>@reservation.Hotel.Name</h6>
                            <p>
                                Single: $@reservation.Hotel.SingleBedPrice
                                Double: $@reservation.Hotel.DoubleBedPrice
                                Suite: $@reservation.Hotel.FamilySuitePrice
                            </p>
                        }

                    </div>
                }
                <div class="input-group  mb-3">
                    <div class="input-group-prepend form-floating">
                        <input type="date" id="startDate" readonly="readonly" class="form-control" @bind="startDate" aria-required="true" />
                        <label asp-for="startDate" class="form-label">Start Date</label>
                        <span asp-validation-for="startDate" class="text-danger"></span>
                    </div>
                    <div class="form-floating">
                        <input type="date" id="endDate" readonly="readonly" class="form-control" @bind="endDate" aria-required="true" />
                        <label asp-for="endDate" class="form-label">End Date</label>
                        <span asp-validation-for="endDate" class="text-danger"></span>
                    </div>
                </div>
                <div class="text-danger">@errorText</div>
                <div class="text-info">5% surcharge applicable</div>
                <div class="form-group row">
                    <label class="col-6" for="roomType">Room Type:</label>
                    <div class="col-6">
                        <select class="form-control-sm" required id="roomType" @bind="selectedRoomType">
                            <option value="Single">Single</option>
                            <option value="Double">Double</option>
                            <option value="FamilySuite">Family Suite</option>
                        </select>
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-6" for="numberOfAdults">Number of Adults (or number of space):</label>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" required min="1" id="numberOfAdults" @bind="numberOfAdults" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-6" for="numberOfChildren">Number of Children:</label>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" id="numberOfChildren" @bind="numberOfChildren" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-6">
                        <label for="numberOfChildren">Total Amount:</label> @discountPercent%
                        <button class="btn btn-sm btn-outline-secondary" type="button" @onclick="CalculateTotalAmount">Calculate</button>
                    </div>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" readonly="readonly" id="totalAmount" value="@totalAmount" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-6" for="numberOfChildren">Deposit Amount:</label>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" id="depositAmount" @bind="depositAmount" />
                    </div>
                </div>
                <!-- Include other form fields as needed -->
            </div>
            <div class="modal-footer">
                <button @onclick="Edit">Save</button>
                <button @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string errorText = ":";
    private RoomType selectedRoomType = RoomType.Single;
    private int numberOfAdults = 1;
    private int numberOfChildren = 0;
    private bool showModal = false; // Add this state variable
    private Reservation reservation { get; set; }
    private DateTime startDate { get; set; } = DateTime.Now;
    private DateTime endDate { get; set; } = DateTime.Now;
    private decimal totalAmount { get; set; }
    private decimal depositAmount { get; set; }
    private decimal initialDepositAmount { get; set; }
    private string _userId = "";
    private decimal discountPercent { get; set; } = 0;

    [Parameter]
    public EventCallback OnEditComplete { get; set; }


    public async Task Show(Reservation actualReservation)
    {
        reservation = actualReservation;
        startDate = actualReservation.ReservationStartDate;
        endDate = actualReservation.ReservationEndDate;
        selectedRoomType = actualReservation.RoomType == null ? RoomType.Single : (RoomType)actualReservation.RoomType;
        numberOfAdults = actualReservation.NumberOfAdults;
        numberOfChildren = actualReservation.NumberOfChildren;
        totalAmount = actualReservation.TotalAmount;
        depositAmount = actualReservation.DepositAmount;
        initialDepositAmount = actualReservation.DepositAmount;

        if (actualReservation.Hotel != null && actualReservation.Tour != null)
        {
            discountPercent = ReservationService.GetDiscountRate(selectedRoomType);
        }
        else
        {
            discountPercent = 0m;
        }
        showModal = true;
    }

    private async Task CalculateTotalAmount()
    {
        await InvokeAsync(() =>
        {
            errorText = ":";
            decimal roomTypePrice = 0m;
            decimal tourCost = 0m;
            decimal hotelCost = 0m;
            int totalDays = (int)(endDate.Date - startDate.Date).TotalDays + 1;

            if (reservation.Tour != null)
            {
                tourCost = reservation.Tour.Cost * numberOfAdults;
                totalDays = reservation.Tour.Days;
            }

            if (reservation.Hotel != null)
            {
                roomTypePrice = GetRoomTypePrice(selectedRoomType);
                hotelCost = roomTypePrice * totalDays;
            }

            if (reservation.Hotel != null && reservation.Tour != null)
            {
                discountPercent = ReservationService.GetDiscountRate(selectedRoomType);
            }

            totalAmount = hotelCost + tourCost;
            totalAmount = totalAmount + (totalAmount * .05m); // surchange
            totalAmount = totalAmount - (totalAmount * (discountPercent / 100));
            StateHasChanged();
        });
    }
    private decimal GetRoomTypePrice(RoomType roomType)
    {
        return roomType == RoomType.Single ? reservation.Hotel.SingleBedPrice : roomType == RoomType.Double ? reservation.Hotel.DoubleBedPrice : reservation.Hotel.FamilySuitePrice;
    }

    private async Task Edit()
    {
        errorText = ":";
        if (DateTime.Now > startDate.Date.AddDays(-14))
        {
            errorText = ": Modification available 14 days before booking date";
            return;
        }
        // Check if start date is before or equal to end date
        if (startDate <= endDate)
        {
            // Check if the selected room type is Single and the number of adults is more than 1
            if (selectedRoomType == RoomType.Single && numberOfAdults > 1)
            {
                // reset numberOfAdults to 1
                numberOfAdults = 1;
                await CalculateTotalAmount();
                errorText = ": try again please";
                // You can also return or throw an exception, depending on your error handling strategy
                return;
            }

            // Create and save the reservation for each day

            reservation.ReservationStartDate = startDate;
            reservation.ReservationEndDate = endDate;
            reservation.RoomType = selectedRoomType;
            reservation.NumberOfAdults = numberOfAdults;
            reservation.NumberOfChildren = numberOfChildren;
            // Other reservation details

            // Calculate and set deposit and total amount based on your logic
            reservation.DepositAmount = depositAmount;
            reservation.TotalAmount = totalAmount;

            reservation.IsConfirmed = depositAmount >= (totalAmount * (decimal)0.20); // The reservation is not confirmed until the deposit is made
            reservation.ConfirmationDate = depositAmount >= (totalAmount * (decimal)0.20) ? DateTime.Now : null;

            // Save the reservation to the database
            bool success = await reservationService.EditReservation(reservation, initialDepositAmount);

            if (success)
            {
                // Notify the parent component about the reservation completion
                await OnEditComplete.InvokeAsync();

                // Close the modal
                CloseModal();
            }
            else
            {
                Console.WriteLine("Reservation updation failed");
            }

        }
        else
        {
            // Handle the case where the start date is after the end date (invalid range)
            // show an error message
            errorText = "Select correct date";
        }
        StateHasChanged();
    }

    private void CloseModal()
    {
        // close the modal
        showModal = false;

    }
}

@using ReserveApp.Data
@using ReserveApp.Services
@inject IReservationService reservationService
@inject ITourService tourService

<div class="modal" style="display: @(showModal ? "block" : "none")">
    <div class="modal-dialog" role="document">

        <div class="modal-content">
            <div class="modal-header">
                <h3>Make Reservation</h3>
            </div>
            <div class="modal-body">
                <!-- Include form fields for reservation details -->
                <div>
                    @if (selectedTour != null)
                    {
                        <h6>@selectedTour.Name</h6>
                        <p>
                            Cost: $@selectedTour.Cost <br/>
                            Available Space: $@selectedTour.AvailableSpaces
                        </p>
                    }

                </div>
                <div class="input-group  mb-3">
                    <div class="input-group-prepend form-floating">
                        <input type="date" id="startDate" readonly="readonly" class="form-control" @bind="startDate" aria-required="true" />
                        <label asp-for="startDate" class="form-label">Start Date</label>
                        <span asp-validation-for="startDate" class="text-danger"></span>
                    </div>
                </div>
                <div class="text-danger">@errorText</div>
                
                <div class="form-group row">
                    <label class="col-6" for="numberOfSpace">Number of Space:</label>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" id="numberOfSpace" @bind="numberOfSpace" />
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-6">
                        <label>Total Amount:</label>
                        <button class="btn btn-sm btn-outline-secondary" type="button" @onclick="CalculateTotalAmount">Calculate</button>
                    </div>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" readonly="readonly" id="totalAmount" value="@totalAmount" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-6" for="numberOfChildren">Deposit Amount:</label>
                    <div class="col-6">
                        <input class="form-control-sm" type="number" id="depositAmount" @bind="depositAmount" />
                    </div>
                </div>
                <!-- Include other form fields as needed -->
            </div>
            <div class="modal-footer">
                <button @onclick="Reserve">Reserve</button>
                <button @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string errorText = ":";
    private int numberOfSpace = 1;
    private bool showModal = false; // Add this state variable
    private Tour selectedTour = new();
    private DateTime startDate { get; set; } = DateTime.Now;
    private DateTime endDate { get; set; } = DateTime.Now;
    private decimal totalAmount { get; set; }
    private decimal depositAmount { get; set; }
    private string _userId = "";

    [Parameter]
    public EventCallback OnReservationComplete { get; set; }


    public void Show(Tour tour, DateTime date1, DateTime date2, string userId)
    {
        selectedTour = tour;
        startDate = date1;
        endDate = date2;
        _userId = userId;
        showModal = true;
    }

    private async Task CalculateTotalAmount()
    {
        await InvokeAsync(() =>
        {
            errorText = ":";
            // if (!tourService.TourAvailableByDateRange(selectedTour, startDate, endDate).Result)
            // {
            //     errorText = "Not available";
            //     return;
            // }
            // Calculate total amount when either date range or room type changes
            if (numberOfSpace > 0)
            {
                totalAmount = selectedTour.Cost * numberOfSpace;
            }
            else
            {
                // Set total amount to 0 or handle accordingly based on your requirements
                totalAmount = 0;
            }
            StateHasChanged();
        });
    }
    
    private async void Reserve()
    {
        errorText = ":";

        // Check if start date is before or equal to end date
        if (startDate <= endDate)
        {
            // if (!tourService.TourAvailableByDateRange(selectedTour, startDate, endDate).Result)
            // {
            //     errorText = "Not available";
            //     return;
            // }
            
            // Calculate the number of days for the reservation
            endDate = startDate.AddDays(selectedTour.Days);

            // Implement the logic to create and save the reservation for each day in the range

            // Create and save the reservation for each day
            Reservation reservation = new Reservation
                {
                    TourId = selectedTour.TourId,
                    CustomerId = _userId,
                    ReservationStartDate = startDate,
                    ReservationEndDate = endDate, // Assuming the reservation is for a single day
                    NumberOfAdults = numberOfSpace,
                    NumberOfChildren = 0,
                    // Other reservation details

                    // Calculate and set deposit and total amount based on your logic
                    DepositAmount = depositAmount,
                    TotalAmount = totalAmount,

                    IsConfirmed = depositAmount >= (totalAmount * (decimal)0.20), // The reservation is not confirmed until the deposit is made
                    ConfirmationDate = depositAmount >= (totalAmount * (decimal)0.20) ? DateTime.Now : null
                };

            // Save the reservation to the database
            bool success = await reservationService.CreateReservation(reservation);
            if (success)
            {
                // Notify the parent component about the reservation completion
                await OnReservationComplete.InvokeAsync();

                // Close the modal
                CloseModal();
            }
            else
            {
                Console.WriteLine("Reservation Creation failed");
            }

        }
        else
        {
            // Handle the case where the start date is after the end date (invalid range)
            // show an error message
            errorText = "Select correct date";
        }
        StateHasChanged();
    }

    private void CloseModal()
    {
        // close the modal
        showModal = false;

    }
}

